#!/bin/bash
# check-sync.sh
# Verifica sincroniza√ß√£o entre reposit√≥rio e website

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîÑ Matrix Protocol - Verifica√ß√£o de Sincroniza√ß√£o${NC}"
echo "===================================================="

# Verificar se website existe
WEBSITE_PATH="./website"
if [ ! -d "$WEBSITE_PATH" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Diret√≥rio website n√£o encontrado em: $WEBSITE_PATH${NC}"
    echo "Este script assume que o website est√° em ./website/"
    echo "Execute de onde o website estiver acess√≠vel ou ajuste WEBSITE_PATH"
    exit 1
fi

echo -e "${GREEN}‚úÖ Website encontrado em: $WEBSITE_PATH${NC}\n"

# Contadores
total_checks=0
sync_ok=0
sync_issues=0

# Fun√ß√£o para verificar se arquivo existe e comparar vers√£o
check_file_sync() {
    local repo_file="$1"
    local website_file="$2"
    local framework_name="$3"
    
    total_checks=$((total_checks + 1))
    
    echo -n "üîç $framework_name: "
    
    if [ ! -f "$repo_file" ]; then
        echo -e "${RED}‚ùå Arquivo reposit√≥rio n√£o encontrado: $repo_file${NC}"
        sync_issues=$((sync_issues + 1))
        return
    fi
    
    if [ ! -f "$website_file" ]; then
        echo -e "${RED}‚ùå Arquivo website n√£o encontrado: $website_file${NC}"
        sync_issues=$((sync_issues + 1))
        return
    fi
    
    # Extrair vers√µes
    repo_version=$(grep "Version:" "$repo_file" | head -1 | sed 's/.*Version:\s*//' | tr -d '*' | xargs)
    website_version=$(grep "version:" "$website_file" | head -1 | sed 's/.*version:\s*//' | tr -d '"' | xargs)
    
    if [ "$repo_version" = "$website_version" ]; then
        echo -e "${GREEN}‚úÖ Vers√µes sincronizadas ($repo_version)${NC}"
        sync_ok=$((sync_ok + 1))
    else
        echo -e "${RED}‚ùå Vers√µes divergentes - Repo: $repo_version | Website: $website_version${NC}"
        sync_issues=$((sync_issues + 1))
    fi
}

echo -e "${YELLOW}üìã Verificando sincroniza√ß√£o de frameworks...${NC}\n"

# Verificar principais frameworks
check_file_sync "MEF_MATRIX_EMBEDDING_FRAMEWORK.md" "$WEBSITE_PATH/content/en/frameworks/mef.md" "MEF"
check_file_sync "ZOF_ZION_ORCHESTRATION_FRAMEWORK.md" "$WEBSITE_PATH/content/en/frameworks/zof.md" "ZOF"
check_file_sync "OIF_OPERATOR_INTELLIGENCE_FRAMEWORK.md" "$WEBSITE_PATH/content/en/frameworks/oif.md" "OIF"
check_file_sync "MOC_MATRIX_ONTOLOGY_CATALOG.md" "$WEBSITE_PATH/content/en/frameworks/moc.md" "MOC"
check_file_sync "MAL_MATRIX_ARBITER_LAYER.md" "$WEBSITE_PATH/content/en/frameworks/mal.md" "MAL"

# Verificar estruturas obrigat√≥rias
echo -e "\n${YELLOW}üìÇ Verificando estruturas obrigat√≥rias...${NC}\n"

check_structure() {
    local path="$1"
    local name="$2"
    
    total_checks=$((total_checks + 1))
    
    if [ -d "$path" ]; then
        file_count=$(find "$path" -type f -name "*.md" -o -name "*.yaml" -o -name "*.yml" | wc -l)
        echo -e "üìÅ $name: ${GREEN}‚úÖ Existe ($file_count arquivos)${NC}"
        sync_ok=$((sync_ok + 1))
    else
        echo -e "üìÅ $name: ${RED}‚ùå N√£o encontrado${NC}"
        sync_issues=$((sync_issues + 1))
    fi
}

check_structure "./guides" "Guias (/guides)"
check_structure "./visualizations" "Visualiza√ß√µes (/visualizations)"
check_structure "./templates" "Templates (/templates)"
check_structure "./.github/ISSUE_TEMPLATE" "Issue Templates (.github/ISSUE_TEMPLATE)"

# Verificar arquivos de documenta√ß√£o cr√≠ticos
echo -e "\n${YELLOW}üìÑ Verificando documenta√ß√£o cr√≠tica...${NC}\n"

critical_docs=(
    "SYNC_GUIDE.md:Guia de Sincroniza√ß√£o"
    "NAVIGATION_MAP.md:Mapa de Navega√ß√£o"
    "CHANGELOG.md:Changelog"
    "CONSOLIDATION_PLAN.md:Plano de Consolida√ß√£o"
)

for doc in "${critical_docs[@]}"; do
    IFS=':' read -r file name <<< "$doc"
    total_checks=$((total_checks + 1))
    
    if [ -f "$file" ]; then
        echo -e "üìÑ $name: ${GREEN}‚úÖ Existe${NC}"
        sync_ok=$((sync_ok + 1))
    else
        echo -e "üìÑ $name: ${RED}‚ùå N√£o encontrado${NC}"
        sync_issues=$((sync_issues + 1))
    fi
done

# Verificar conte√∫do espec√≠fico
echo -e "\n${YELLOW}üîç Verificando conte√∫do espec√≠fico...${NC}\n"

# MEF Section 5
total_checks=$((total_checks + 1))
if grep -q "## 5\. UKI Lifecycle" "MEF_MATRIX_EMBEDDING_FRAMEWORK.md" 2>/dev/null; then
    echo -e "üìù MEF Section 5 (UKI Lifecycle): ${GREEN}‚úÖ Presente no reposit√≥rio${NC}"
    sync_ok=$((sync_ok + 1))
else
    echo -e "üìù MEF Section 5 (UKI Lifecycle): ${RED}‚ùå N√£o encontrada${NC}"
    sync_issues=$((sync_issues + 1))
fi

# ZOF Universal Pattern no website
total_checks=$((total_checks + 1))
if [ -f "$WEBSITE_PATH/content/en/frameworks/zof.md" ] && grep -q "Universal Pattern" "$WEBSITE_PATH/content/en/frameworks/zof.md"; then
    echo -e "üìù ZOF Universal Pattern: ${GREEN}‚úÖ Presente no website${NC}"
    sync_ok=$((sync_ok + 1))
else
    echo -e "üìù ZOF Universal Pattern: ${RED}‚ùå N√£o encontrado no website${NC}"
    sync_issues=$((sync_issues + 1))
fi

# Relat√≥rio final
echo -e "\n${BLUE}üìä RELAT√ìRIO DE SINCRONIZA√á√ÉO${NC}"
echo "================================="
echo "Total de verifica√ß√µes: $total_checks"
echo -e "Itens sincronizados: ${GREEN}$sync_ok${NC}"
echo -e "Problemas encontrados: ${RED}$sync_issues${NC}"

# Calcular percentual
if [ $total_checks -gt 0 ]; then
    percentage=$(( (sync_ok * 100) / total_checks ))
    echo "Percentual de sincroniza√ß√£o: $percentage%"
fi

if [ $sync_issues -eq 0 ]; then
    echo -e "\n${GREEN}üéâ SUCESSO: Reposit√≥rio e website est√£o sincronizados!${NC}"
    exit 0
else
    echo -e "\n${RED}‚ö†Ô∏è  ENCONTRADOS $sync_issues PROBLEMAS DE SINCRONIZA√á√ÉO${NC}"
    echo -e "${YELLOW}üí° Consulte SYNC_GUIDE.md para procedimentos de corre√ß√£o${NC}"
    exit 1
fi