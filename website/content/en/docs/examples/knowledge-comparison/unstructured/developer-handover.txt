HANDOVER NOTES - Pedro Silva (Senior Dev)
Departure: 03/29/2024
Handing over to: Lucas (taking over projects) and JoÃ£o (technical context)

=== CRITICAL KNOWLEDGE THAT IS NOT DOCUMENTED ===

STRIPE WEBHOOK:
- That hack in webhook handler (line 247 of PaymentController.java) NEEDS to be reviewed
- Sometimes Stripe sends the same webhook 3x in a row, I implemented manual debounce with Redis
- Redis key: "webhook_dedupe_{transaction_id}" with 300s TTL
- WITHOUT THIS CHARGES GET DUPLICATED!!! Very important

GATEWAY FAILOVER:
- Implemented manual failover Stripe -> PayPal when Stripe returns 503
- Not documented because it was "temporary" (8 months ago...)
- Logic in PaymentService.java processPayment() method
- Works 90% of the time, but PayPal sometimes rejects transaction that Stripe would accept

CURRENCY CONVERSION:
- Known bug in EUR -> USD conversion
- Using outdated exchange rate API (fixer.io from 2022)
- Rate updates only once per day at midnight, should be hourly
- Bug: rounds to 2 decimals but PayPal needs 4 for some currencies

PCI COMPLIANCE:
- Card data never touches our servers (tokenization only)
- BUT: CVV logs were accidentally saved in application.log until last month
- Fixed by adding [REDACTED] filter but old logs still contain CVVs
- Compliance team doesn't know about this yet...

DATABASE PERFORMANCE:
- payments table is 2M+ rows, no proper indexing on status column
- Query to find "pending" payments takes 30+ seconds in production
- Temporary fix: added Redis cache with 5-minute TTL
- Real fix needs database migration but nobody wanted to approve downtime

MONITORING GAPS:
- No alerts for payment failures > 5%
- No monitoring for average processing time
- Circuit breaker exists but metrics not exported to Grafana
- SLA is 99.9% but we don't measure it

API RATE LIMITS:
- Stripe: 100 req/sec (we never hit it)
- PayPal: 50 req/sec (we hit this during Black Friday)
- No rate limiting on our API, just pray
- During high load, retry storm kills PayPal integration

CONFIGURATION SECRETS:
- Production API keys hardcoded in application.properties
- Different keys for sandbox/production, easy to mix up
- No rotation schedule, keys are from 2022
- Backup keys exist but location unknown (maybe in John's email?)

TECHNICAL DEBT:
- PaymentProcessor class violates single responsibility (does validation, processing, logging, notifications)
- No unit tests for currency conversion logic
- Integration tests mock external APIs, never test real flows
- Exception handling is generic catch-all, no specific error codes

BUSINESS LOGIC SCATTERED:
- Discount rules split between frontend JavaScript and backend Java
- Fraud detection rules hardcoded in SQL queries
- Tax calculation calls 3 different microservices (US, EU, BR tax services)
- No documentation on which service is authoritative

INCIDENT HISTORY:
- Dec 2023: 4-hour outage due to Stripe webhook misconfiguration
- Jan 2024: Double charges for 2 days, refunded manually
- Feb 2024: PayPal failover triggered false fraud alerts, customers locked out

CONTACT INFO:
- Stripe support: requires payment-team slack channel (I was only member)
- PayPal technical contact: Maria Santos (maria.santos@paypal.com)
- PCI auditor: due in June 2024, contact accounting for details
- Database admin: Carlos knows the performance issues, never prioritized fix

THIS IS INSTITUTIONAL KNOWLEDGE THAT WILL BE LOST IF NOT DOCUMENTED PROPERLY!